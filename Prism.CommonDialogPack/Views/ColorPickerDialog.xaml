<UserControl x:Class="Prism.CommonDialogPack.Views.ColorPickerDialog"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:prism="http://prismlibrary.com/"             
             prism:ViewModelLocator.AutoWireViewModel="True"
             xmlns:controls="clr-namespace:Prism.CommonDialogPack.Controls"
             xmlns:resources="clr-namespace:Prism.CommonDialogPack.Resources"
             xmlns:converters="clr-namespace:Prism.CommonDialogPack.Converters">
    <UserControl.Resources>
        <converters:RGBToSolidColorBrushConverter x:Key="RGBToSolidColorBrushConverter"/>
    </UserControl.Resources>
    <Grid Margin="5">
        <Grid.RowDefinitions>
            <RowDefinition Height="2*"/>
            <RowDefinition Height="1*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition/>
            <ColumnDefinition/>
        </Grid.ColumnDefinitions>
        <Grid Margin="10">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition/>
            </Grid.RowDefinitions>
            <TextBlock Text="Basic"/>
            <ListView x:Name="BasicColors"
                      Grid.Row="1"
                      ItemsSource="{Binding Source={x:Static resources:BasicColors.RGB}}"
                      SelectedItem="{Binding SelectedBasicColor}"
                      BorderBrush="{x:Null}"
                      BorderThickness="0"
                      SelectionMode="Single">
                <ListView.ItemsPanel>
                    <ItemsPanelTemplate>
                        <UniformGrid Columns="8"/>
                    </ItemsPanelTemplate>
                </ListView.ItemsPanel>
                <ListView.ItemTemplate>
                    <DataTemplate>
                        <Rectangle Fill="{Binding Converter={StaticResource RGBToSolidColorBrushConverter}}"
                                   MouseDown="BasicRectangle_MouseDown"/>
                    </DataTemplate>
                </ListView.ItemTemplate>
                <ListView.ItemContainerStyle>
                    <Style TargetType="ListViewItem">
                        <Setter Property="Background" Value="{x:Null}"/>
                        <Setter Property="Foreground" Value="{x:Null}"/>
                        <Setter Property="Padding" Value="1"/>
                        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
                        <Setter Property="BorderBrush">
                            <Setter.Value>
                                <SolidColorBrush Color="{StaticResource {x:Static SystemColors.ActiveBorderColorKey}}"/>
                            </Setter.Value>
                        </Setter>
                        <Setter Property="BorderThickness" Value="1"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="ContentControl">
                                    <Border Background="{TemplateBinding Background}"
                                            BorderBrush="{TemplateBinding BorderBrush}"
                                            BorderThickness="{TemplateBinding BorderThickness}">
                                        <ContentPresenter/>
                                    </Border>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter Property="BorderBrush" Value="Black"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="Transparent"/>
                                <Setter Property="Opacity" Value="0.5"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </ListView.ItemContainerStyle>
            </ListView>
        </Grid>
        <Grid Grid.Row="1"
              Margin="10, 20, 10, 10">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition/>
            </Grid.RowDefinitions>
            <TextBlock Text="Custom"/>
            <ListView x:Name="CustomColors"
                      Grid.Row="1"
                      ItemsSource="{Binding CustomColors}"
                      SelectedItem="{Binding SelectedCutomColor}"
                      BorderBrush="{x:Null}"
                      BorderThickness="0">
                <ListView.ItemsPanel>
                    <ItemsPanelTemplate>
                        <UniformGrid Columns="8"/>
                    </ItemsPanelTemplate>
                </ListView.ItemsPanel>
                <ListView.ItemTemplate>
                    <DataTemplate>
                        <Rectangle Fill="{Binding RGB, Converter={StaticResource RGBToSolidColorBrushConverter}}"
                                   MouseDown="CustomRectangle_MouseDown"/>
                    </DataTemplate>
                </ListView.ItemTemplate>
                <ListView.ItemContainerStyle>
                    <Style TargetType="ListViewItem">
                        <Setter Property="Background" Value="{x:Null}"/>
                        <Setter Property="Foreground" Value="{x:Null}"/>
                        <Setter Property="Margin" Value="1"/>
                        <Setter Property="Padding" Value="0"/>
                        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
                        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}"/>
                        <Setter Property="BorderThickness" Value="1"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="ContentControl">
                                    <Border Background="{TemplateBinding Background}"
                                            BorderBrush="{TemplateBinding BorderBrush}"
                                            BorderThickness="{TemplateBinding BorderThickness}">
                                        <ContentPresenter/>
                                    </Border>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter Property="BorderBrush" Value="Black"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="Transparent"/>
                                <Setter Property="Opacity" Value="0.5"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </ListView.ItemContainerStyle>
            </ListView>
        </Grid>
        <UniformGrid Grid.Row="2"
                     Rows="1"
                     Margin="10">
            <Button Content="OK"
                    Command="{Binding OKCommand}"
                    Margin="0, 0, 10, 0"
                    Height="30"/>
            <Button Content="Cancel"
                    Command="{Binding CancelCommand}"
                    Margin="10, 0, 0, 0"/>
        </UniformGrid>
        <Grid Grid.Column="1" Margin="10">
            <controls:HSVPicker HSV="{Binding InputHSV}"
                                SelectedHSV="{Binding SelectedHSV, Mode=OneWayToSource}">
                <controls:HSVPicker.Resources>
                    <Style TargetType="{x:Type controls:HSPicker}">
                        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}"/>
                        <Setter Property="BorderThickness" Value="1"/>
                    </Style>
                    <Style TargetType="{x:Type controls:BrightnessSlider}">
                        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}"/>
                        <Setter Property="BorderThickness" Value="1"/>
                    </Style>
                </controls:HSVPicker.Resources>
            </controls:HSVPicker>
        </Grid>
        <Grid Grid.Row="1"
              Grid.Column="1"
              Margin="10">
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition Width="2*"/>
            </Grid.ColumnDefinitions>
            <Grid Margin="0, 5">
                <Grid.RowDefinitions>
                    <RowDefinition/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <Rectangle Fill="{Binding CurrentRGB, Converter={StaticResource RGBToSolidColorBrushConverter}}"
                           Stroke="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}"/>
                <StackPanel Grid.Row="1">
                    <TextBlock Text="ColorCode"/>
                    <Grid>
                        <TextBox x:Name="InputColorCode"
                                 Text="{Binding InputColorCode}"
                                 Visibility="Hidden"
                                 LostFocus="InputColorCode_LostFocus"
                                 KeyDown="Input_KeyDown"/>
                        <TextBox x:Name="DisplayColorCode"
                                 Text="{Binding DisplayColorCode}"
                                 IsReadOnly="True"
                                 GotFocus="DisplayColorCode_GotFocus"/>
                    </Grid>
                </StackPanel>
            </Grid>
            <Grid Grid.Column="1">
                <Grid.Resources>
                    <Style TargetType="TextBlock">
                        <Setter Property="Width" Value="20"/>
                        <Setter Property="TextAlignment" Value="Center"/>
                        <Setter Property="VerticalAlignment" Value="Center"/>
                    </Style>
                    <Style TargetType="TextBox">
                        <Setter Property="VerticalAlignment" Value="Center"/>
                    </Style>
                </Grid.Resources>
                <Grid.RowDefinitions>
                    <RowDefinition/>
                    <RowDefinition/>
                    <RowDefinition/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition/>
                    </Grid.ColumnDefinitions>
                    <TextBlock Text="H:"/>
                    <TextBox x:Name="InputHue"
                             Grid.Column="1"
                             Text="{Binding InputHue, Mode=OneWayToSource, ValidatesOnExceptions=True}"
                             Visibility="Hidden"
                             LostFocus="InputHue_LostFocus"
                             KeyDown="Input_KeyDown"/>
                    <TextBox x:Name="DisplayHue"
                             Grid.Column="1"
                             Text="{Binding DisplayHue}"
                             IsReadOnly="True"
                             GotFocus="DisplayHue_GotFocus"/>
                </Grid>
                <Grid Grid.Row="1">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition/>
                    </Grid.ColumnDefinitions>
                    <TextBlock Text="S:"/>
                    <TextBox x:Name="InputSaturation"
                             Grid.Column="1"
                             Text="{Binding InputSaturation}"
                             Visibility="Hidden"
                             LostFocus="InputSaturation_LostFocus"
                             KeyDown="Input_KeyDown"/>
                    <TextBox x:Name="DisplaySaturation"
                             Grid.Column="1"
                             Text="{Binding DisplaySaturation}"
                             IsReadOnly="True"
                             GotFocus="DisplaySaturation_GotFocus"/>
                </Grid>
                <Grid Grid.Row="2">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition/>
                    </Grid.ColumnDefinitions>
                    <TextBlock Text="V:"/>
                    <TextBox x:Name="InputBrightness"
                             Grid.Column="1"
                             Text="{Binding InputBrightness}"
                             Visibility="Hidden"
                             LostFocus="InputBrightness_LostFocus"
                             KeyDown="Input_KeyDown"/>
                    <TextBox x:Name="DisplayBrightness"
                             Grid.Column="1"
                             Text="{Binding DisplayBrightness}"
                             IsReadOnly="True"
                             GotFocus="DisplayBrightness_GotFocus"/>
                </Grid>
                <Grid Grid.Column="1">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition/>
                    </Grid.ColumnDefinitions>
                    <TextBlock Text="R:"/>
                    <TextBox x:Name="InputRed"
                             Grid.Column="1"
                             Text="{Binding InputRed}"
                             Visibility="Hidden"
                             LostFocus="InputRed_LostFocus"
                             KeyDown="Input_KeyDown"/>
                    <TextBox x:Name="DisplayRed"
                             Grid.Column="1"
                             Text="{Binding DisplayRed}"
                             IsReadOnly="True"
                             GotFocus="DisplayRed_GotFocus"/>
                </Grid>
                <Grid Grid.Row="1"
                      Grid.Column="1">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition/>
                    </Grid.ColumnDefinitions>
                    <TextBlock Text="G:"/>
                    <TextBox x:Name="InputGreen"
                             Grid.Column="1"
                             Text="{Binding InputGreen}"
                             Visibility="Hidden"
                             LostFocus="InputGreen_LostFocus"
                             KeyDown="Input_KeyDown"/>
                    <TextBox x:Name="DisplayGreen"
                             Grid.Column="1"
                             Text="{Binding DisplayGreen}"
                             IsReadOnly="True"
                             GotFocus="DisplayGreen_GotFocus"/>
                </Grid>
                <Grid Grid.Row="2"
                      Grid.Column="1">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition/>
                    </Grid.ColumnDefinitions>
                    <TextBlock Text="B:"/>
                    <TextBox x:Name="InputBlue"
                             Grid.Column="1"
                             Text="{Binding InputBlue}"
                             Visibility="Hidden"
                             LostFocus="InputBlue_LostFocus"
                             KeyDown="Input_KeyDown"/>
                    <TextBox x:Name="DisplayBlue"
                             Grid.Column="1"
                             Text="{Binding DisplayBlue}"
                             IsReadOnly="True"
                             GotFocus="DisplayBlue_GotFocus"/>
                </Grid>
            </Grid>
        </Grid>
        <Button Grid.Row="2"
                Grid.Column="1"
                Height="30"
                Margin="5"
                Content="Add to Custom Colors"
                Command="{Binding AddCustomColorCommand}"/>
    </Grid>
</UserControl>
